<?php

/**
 * Class for handling admin-related functionality
 * Class WPTinypassAdmin
 */
class WPTinypassAdmin extends WPTinypass {
	// Slug names for admin pages
	const SETTINGS_PAGE_SLUG = 'tinypass-settings-page';
	const SETTINGS_RESOURCES_PAGE_SLUG = 'tinypass-resources-settings-page';
	const SETTINGS_ERROR_SLUG = 'tinypass-error';

	// Nonce name for metabox
	const META_NONCE_NAME = 'tinypass_meta_nonce';
	// Nonce name for bulk editing
	const BULK_NONCE_NAME = 'tinypass_bulk_nonce';


	public function __construct() {
		// Add javascript for admin pages
		add_action( 'admin_enqueue_scripts', array( $this, 'addAdminJs' ) );

		// Add menu item
		add_action( 'admin_menu', array( $this, 'addMenu' ) );
		// Determine the required page to render and render
		add_action( 'admin_init', array( $this, 'adminInit' ) );

		// Add metaboxes on post and page edit pages
		add_action( 'add_meta_boxes', array( $this, 'initMetaBox' ) );
		add_action( 'admin_init', array( $this, 'initMetaBox' ) );

		// Handle saving of the metabox data and querying the API
		add_action( 'edit_post', array( $this, 'editPost' ) );
		// Display any errors generated by plugin
		add_action( 'admin_notices', array( $this, 'renderMetaBoxErrors' ) );

		add_action( self::WP_FILTER_META, array( $this, 'postMeta' ) );

		// If current user can edit content and truncation settings is set to "tpmore tag" - init the tinymce button
		if ( ( current_user_can( 'edit_posts' ) || current_user_can( 'edit_pages' ) ) && $this->isConfigured() && ( self::$truncation_mode == self::TRUNCATION_MODE_TPMORE ) ) {
			if ( get_user_option( 'rich_editing' ) == 'true' ) {
				// Add tpmore button for WYSIWYG editor
				// Add tinymce plugin
				add_filter( 'mce_external_plugins', array(
					$this,
					'addTinymcePlugin'
				) );
				// Add button to panel
				add_filter( 'mce_buttons', array(
					$this,
					'registerEditorButtons'
				) );
			}
		}

		// If business model is hard / keyed paywall - init AXAJ actions for the price editor
		if ( ( self::$business_model == TinypassConfig::BUSINESS_MODEL_SUBSCRIPTION ) && $this->isConfigured() ) {
			// Add pricing page link into submenu
			add_action( 'admin_menu', array( $this, 'addResourcesSubmenu' ) );
			// Add AJAX actions for resource editing:
		}

		// If plugin is completely configured - init bulk editing boxes
		if ( $this->isConfigured() ) {
			// Render the box for bulk editing
			add_action( 'bulk_edit_custom_box', array(
				$this,
				'bulkEditBox'
			), 10, 2 );
			// Add column for bulk editing for posts
			add_filter( 'manage_posts_columns', array( $this, 'addColumn' ) );
			// Add column for bulk editing for pages
			add_filter( 'manage_pages_columns', array( $this, 'addColumn' ) );
			// Handle bulk saving
			add_action( 'edit_post', array( $this, 'saveBulk' ) );
		}
	}

	/**
	 * Adds tinypass column
	 *
	 * @param $columns
	 *
	 * @return array
	 */
	public function addColumn( $columns ) {
		$columns['tinypass'] = 'tinypass';

		return $columns;
	}

	/**
	 * Render box for bulk editing
	 *
	 * @param $columnName
	 * @param $postType
	 */
	public function bulkEditBox( $columnName, $postType ) {
		// If queried column isn't "tinypass" - don't render anything
		if ( $columnName != 'tinypass' ) {
			return;
		}
		// Render nonce field
		wp_nonce_field( TINYPASS_PLUGIN_FILE_PATH, self::BULK_NONCE_NAME );

		// Init empty charge option
		$contentSettings = new TinypassContentSettings();
		// Set selected charge option to "-1" wich would represent "no change" option
		$contentSettings->chargeOption( -1 );
		// Let the template know that it's not being rendered from settings page
		$isSettingsPage = false;

		// If business model is metered paywall - render box for metered paywall content settings
		if ( self::$business_model == TinypassConfig::BUSINESS_MODEL_METERED ) {
			// Include the template file
			require( plugin_dir_path( TINYPASS_PLUGIN_FILE_PATH ) . '/views/admin/_bulk_paywall.php' );
		} else {
			// Set the empty currencies array
			$currencies = array();
			try {
				// Try to get an array of available currencies
				$currencies = self::$tinypass->getCurrencies();
			} catch ( Exception $e ) {
				// Add error on failure. All exception messages are using i18n before throwing
				add_settings_error( self::SETTINGS_ERROR_SLUG, self::SETTINGS_ERROR_SLUG, 'Tinypass: ' . $e->getMessage() );
			}
			// Get resources array
			$resources = $this->getResources();
			// Include the template file
			require( plugin_dir_path( TINYPASS_PLUGIN_FILE_PATH ) . '/views/admin/_bulk_subscription.php' );
		}
	}

	/**
	 * Register the tinymce plugin in array of tinymce's plugins
	 *
	 * @param array $pluginArray Current array of tinymce's plugins
	 *
	 * @return array Updated array of tinymce's plugins with tinypass
	 */
	public function addTinymcePlugin( $pluginArray ) {
		$pluginArray[ self::PLUGIN_NAME ] = plugin_dir_url( TINYPASS_PLUGIN_FILE_PATH ) . 'tinymce/editor_plugin.js';

		return $pluginArray;
	}

	/**
	 * Add the tpmore button into array of tinymce's buttons
	 *
	 * @param array $buttons The current array of tinymce's dash buttons
	 *
	 * @return array Updated array of buttons with tinypass button included
	 */
	public function registerEditorButtons( $buttons ) {
		array_push( $buttons, self::MORE_BUTTON );

		return $buttons;
	}

	/**
	 * Enqueue javascript and css for admin pages
	 */
	public function addAdminJs() {
		wp_enqueue_script( 'tinypass_admin_js', plugin_dir_url( TINYPASS_PLUGIN_FILE_PATH ) . 'js/admin.js' );
		wp_enqueue_style( 'tinypass_admin_css', plugin_dir_url( TINYPASS_PLUGIN_FILE_PATH ) . 'css/admin.css' );
	}

	/**
	 * Init metabox for content keying settings
	 */
	public function initMetaBox() {
		if ( $this->isConfigured() ) {
			// If plugin is configured - add the proper metabox
			foreach ( array( 'post', 'page', 'article' ) as $postType ) {
				add_meta_box( 'tinypass_metabox', __( 'Tinypass', 'tinypass' ), array(
					$this,
					'renderMetaBox'
				), $postType );
			}
		} else {
			// If not - add metabox with note about it
			foreach ( array( 'post', 'page', 'article' ) as $postType ) {
				add_meta_box( 'tinypass_metabox', __( 'Tinypass', 'tinypass' ), array(
					$this,
					'renderNotCofiguredMetaBox'
				), $postType );
			}
		}
	}

	/**
	 * Render metabox when the plugin is not configured properly
	 */
	public function renderNotCofiguredMetaBox() {
		// Include the template for the metabox
		require_once( plugin_dir_path( TINYPASS_PLUGIN_FILE_PATH ) . '/views/admin/metabox_not_configured.php' );
	}

	/**
	 * Find transient errors generated by sandbox and re-set them
	 */
	public function renderMetaBoxErrors() {
		if ( ! in_array( get_current_screen()->parent_base, array( self::SETTINGS_PAGE_SLUG ) ) ) {
			if ( $transientErrors = get_transient( 'settings_errors' ) ) {
				$tinypassErrors = array();
				foreach ( $transientErrors as $error ) {
					if ( $error['setting'] == self::SETTINGS_ERROR_SLUG ) {
						$tinypassErrors[] = $error;
					}
				}
				if ( ! empty( $tinypassErrors ) ) {
					global $wp_settings_errors;
					$wp_settings_errors = $transientErrors;
					settings_errors( self::SETTINGS_ERROR_SLUG );
					delete_transient( 'settings_errors' );
				}
			}
		}
	}


	/**
	 * Render html for the metabox
	 *
	 * @param WP_post $post
	 */
	public function renderMetaBox( $post ) {
		// Render nonce field for the meta box
		wp_nonce_field( TINYPASS_PLUGIN_FILE_PATH, self::META_NONCE_NAME );

		// Get post's metadata
		$postMeta = get_post_meta( $post->ID, self::META_NAME, true );
		// Init content settings from metadata

		$contentSettings = TinypassContentSettings::fromArray( $postMeta );

		if ( 'auto-draft' === $post->post_status ) {
			// Get default settings for new content
			$contentSettings = TinypassContentSettings::fromArray( self::$default_access_settings );
		}
		$contentSettings->validate( self::$business_model, self::$enable_ppp, self::$tinypass->algorithmicKeyAvailable(), $this->getResources() );

		// Let the template know that it's being rendered not from settings page
		$isSettingsPage = false;

		// If business model is metered paywall
		if ( self::$business_model == TinypassConfig::BUSINESS_MODEL_METERED ) {
			require_once( plugin_dir_path( TINYPASS_PLUGIN_FILE_PATH ) . '/views/admin/metabox_metered.php' );
		} elseif ( self::$business_model == TinypassConfig::BUSINESS_MODEL_SUBSCRIPTION ) {
			// Get all available resources as array of TinypassResource
			$resources = self::getResources();
			// Init currencies array
			$currencies = array();

			try {
				// Try to get an array of available currencies
				$currencies = self::$tinypass->getCurrencies();
			} catch ( Exception $e ) {
				// Add error on failure. All exception messages are using i18n before throwing
				add_settings_error( self::SETTINGS_ERROR_SLUG, self::SETTINGS_ERROR_SLUG, 'Tinypass: ' . $e->getMessage() );
			}

			// Include the template
			require_once( plugin_dir_path( TINYPASS_PLUGIN_FILE_PATH ) . '/views/admin/metabox.php' );
		}
	}

	/**
	 * Save post triggered by bulk editing
	 *
	 * @param $postId
	 */
	public function saveBulk( $postId ) {
		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {
			return;
		}

		if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {
			return;
		}

		if ( ! $this->isConfigured() ) {
			return;
		}

		if ( ! current_user_can( 'edit_post', $postId ) ) {
			return;
		}

		// Check if the user intended to save the post
		if ( ! isset( $_GET[ self::BULK_NONCE_NAME ] ) || ! wp_verify_nonce( $_GET[ self::BULK_NONCE_NAME ], TINYPASS_PLUGIN_FILE_PATH ) ) {
			return;
		}

		try {
			// Try to save meta data expecting the Exception exception
			$this->saveMeta( $postId );
		} catch ( Exception $e ) {
			// Add error on failure. All exception messages are using i18n before throwing
			add_settings_error( self::SETTINGS_ERROR_SLUG, self::SETTINGS_ERROR_SLUG, 'Tinypass: ' . $e->getMessage() );
			// Set error as transient
			set_transient( 'settings_errors', get_settings_errors(), 30 );
		}

	}

	/**
	 * Saving post triggered by post edit page
	 *
	 * @param $postId
	 */
	public function editPost( $postId ) {

		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {
			return;
		}

		if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {
			return;
		}

		if ( ! $this->isConfigured() ) {
			return;
		}

		if ( ! current_user_can( 'edit_post', $postId ) ) {
			return;
		}

		// Check if the user intended to save the post meta
		if ( ! isset( $_POST[ self::META_NONCE_NAME ] ) || ! wp_verify_nonce( $_POST[ self::META_NONCE_NAME ], TINYPASS_PLUGIN_FILE_PATH ) ) {
			return;
		}

		try {
			// Try to save meta data expecting the Exception exception
			$this->saveMeta( $postId );
		} catch ( Exception $e ) {
			// Add error on failure. All exception messages are using i18n before throwing
			add_settings_error( self::SETTINGS_ERROR_SLUG, self::SETTINGS_ERROR_SLUG, 'Tinypass: ' . $e->getMessage() );
			// Set error as transient
			set_transient( 'settings_errors', get_settings_errors(), 30 );
		}
	}

	/**
	 * Handle saving post meta data, throw exceptions if something wrong BEFORE saving meta into db
	 *
	 * @param $postId
	 *
	 * @throws Exception
	 */
	private function saveMeta( $postId ) {
		// Determine the request type (get or post)
		$request = null;
		if ( isset( $_POST[ self::META_NAME ] ) ) {
			$request = $_POST;
		} elseif ( isset( $_GET[ self::META_NAME ] ) ) {
			$request = $_GET;
		} else {
			throw new Exception( __( 'Invalid request data', 'tinypass' ) );
		}

		// Instantiate current settings from database - get meta string
		$metaString = get_post_meta( $postId, self::META_NAME, true );
		// Init settings objec from string
		$contentSettings = TinypassContentSettings::fromArray( $metaString );

		// Set basic data
		$contentSettings
			->id( $postId )
			->meta( apply_filters( WPTinypass::WP_FILTER_META, array( 'id' => $postId ) ) )
			->url( get_permalink( $postId ) )
			->name( get_the_title( $postId ) );

		// Charge option = -1 is "no change" option in bulk editing, so no actions needed
		if ( -1 == ( isset( $request[ self::META_NAME ][ $contentSettings->chargeOptionPropertyName() ] ) ? $request[ self::META_NAME ][ $contentSettings->chargeOptionPropertyName() ] : null ) ) {
			return;
		}

		// Do any necessary API request for saving content settings
		$contentSettings = self::$tinypass->saveContentSettings( $contentSettings, $request[ self::META_NAME ] );

		// Update meta
		add_post_meta( $postId, self::META_NAME, $contentSettings->toArray(), true ) or
		update_post_meta( $postId, self::META_NAME, $contentSettings->toArray() );
	}

	/**
	 * Get default meta data for algorithmic keying
	 *
	 * @param array $postMeta
	 *
	 * @return array
	 */
	public function postMeta( $postMeta = array() ) {
		if ( ! is_array( $postMeta ) ) {
			$postMeta = array();
		}

		$id = isset( $postMeta['id'] ) ? $postMeta['id'] : null;
		if ( ! $id ) {
			$id = get_the_ID();
		}
		$post = get_post( $id );

		$postMeta['title']        = $post->post_title;
		$postMeta['author']       = get_the_author_meta( 'user_nicename', $post->post_author );
		$postMeta['word_count']   = str_word_count( strip_tags( $post->post_content ) );
		$postMeta['publish_date'] = strtotime( $post->post_date );
		$postMeta['tags']         = wp_get_post_tags( $post->ID, array( 'fields' => 'slugs' ) );

		return $postMeta;
	}

	/**
	 * Adds menu page for plugin settings in admin dashboard
	 */
	public function addMenu() {
		add_menu_page( __( 'Tinypass plugin settings', 'tinypass' ), __( 'Tinypass', 'tinypass' ), 'manage_options', self::SETTINGS_PAGE_SLUG, array(
			$this,
			'renderSettingsPage'
		), plugin_dir_url( TINYPASS_PLUGIN_FILE_PATH ) . '/images/favicon.ico' );
	}

	/**
	 * Adds a sub-menu page for pricing settings in admin dashboard (only for "hard / keyed paywall" business model)
	 */
	public function addResourcesSubmenu() {
		add_submenu_page( self::SETTINGS_PAGE_SLUG, __( 'Tinypass plugin settings', 'tinypass' ), __( 'General settings', 'tinypass' ), 'manage_options', self::SETTINGS_PAGE_SLUG, array(
			$this,
			'renderSettingsPage'
		) );
		add_submenu_page( self::SETTINGS_PAGE_SLUG, __( 'Tinypass resources settings', 'tinypass' ), __( 'Resources settings', 'tinypass' ), 'manage_options', self::SETTINGS_RESOURCES_PAGE_SLUG, array(
			$this,
			'renderResourcesPage'
		) );
	}

	/**
	 * Inits required admin page
	 */
	public function adminInit() {
		// Determine on which stage of configuration / or which plugin sub-page is requested
		$step = $this->determineStep();
		// This should be safe, since determineStep() generates only known strings
		$method = 'settings' . ucfirst( $step );
		// Make initialization
		$this->$method();
	}

	/**
	 * Renders the plugin's main setting's page
	 */
	public function renderSettingsPage() {
		if ( ! current_user_can( 'manage_options' ) ) {
			wp_die( __( 'You do not have sufficient permissions to access this page.', 'tinypass' ) );
		}

		// Determine on which stage of configuration / or which plugin sub-page is requested
		$step = $this->determineStep();
		// Init array of parameters for the template with the first parameter of empty array of currencies
		$params = array(
			'currencies' => array()
		);

		// Initialize default content settings
		$contentSettings           = TinypassContentSettings::fromArray( self::$default_access_settings );
		$params['contentSettings'] = $contentSettings;

		if ( ( $step == 'subscription' ) && $this->isConfigured() ) {
			// If current page is plugin's main settings page for "hard / keyed paywall"
			try {
				// Fetch available currencies
				$params['currencies'] = self::$tinypass->getCurrencies();
				// Get available resources
				$params['resources'] = self::getResources();
			} catch ( Exception $e ) {
				// Add error on failure. All exception messages are using i18n before throwing
				add_settings_error( self::SETTINGS_ERROR_SLUG, self::SETTINGS_ERROR_SLUG, 'Tinypass: ' . $e->getMessage() );
			}

		}

		// Let template know that it's being rendered from settings page
		$params['isSettingsPage'] = true;

		// Render the template
		$this->renderView( $step, $params );
	}

	/**
	 * Renders pricing page
	 */
	public function renderResourcesPage() {
		try {
			// Makes request to get resources
			$apiResources    = self::$tinypass->updateResourceList( $this->getResources( false ) );
			self::$resources = $apiResources;
			$this->setOption( self::OPTION_NAME_RESOURCES, self::$resources );
		} catch ( Exception $e ) {
			// Add error on failure. All exception messages are using i18n before throwing
			add_settings_error( self::SETTINGS_ERROR_SLUG, self::SETTINGS_ERROR_SLUG, 'Tinypass: ' . $e->getMessage() );
		}
		// Get all available resources
		$resources = self::getResources( false );

		// Init array of variables for template
		$params = array(
			'resources' => $resources
		);

		// Render the template
		$this->renderView( 'resources', $params );
	}

	/**
	 * Inits business model selection page
	 */
	private function settingsBusinessModel() {
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_APP_ID ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_API_TOKEN ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_MODE ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_DEDICATED_ENVIRONMENT ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_PAYWALL_ID ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_BUSINESS_MODEL ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_NULL ), array(
			$this,
			'sanitizeConnection'
		) );
	}

	/**
	 * Inits main settings page for metered paywall business model
	 */
	private function settingsPaywall() {
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_DEBUG ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_ENABLE_PREMIUM_TAG ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_METER_HOME_PAGE ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_DISABLED_FOR_PRIVILEGED ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_DEFAULT_ACCESS_SETTINGS ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_TRUNCATION_MODE ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_PARAGRAPHS_COUNT ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_FIRST_CLICK_MODE ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_FIRST_CLICK_REFERRERS ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_DISPLAY_MODE ) );
		// Add sanitization function for last option
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_NULL ), array(
			$this,
			'sanitizeSettings'
		) );
	}

	/**
	 * Inits main settings page for 'hard / keyed' business model
	 */
	private function settingsSubscription() {
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_DEBUG ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_ENABLE_PREMIUM_TAG ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_ENABLE_PPP ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_DISABLED_FOR_PRIVILEGED ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_DEFAULT_ACCESS_SETTINGS ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_TRUNCATION_MODE ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_PARAGRAPHS_COUNT ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_FIRST_CLICK_MODE ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_FIRST_CLICK_REFERRERS ) );
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_DISPLAY_MODE ) );
		// Add sanitization function for last option
		register_setting( 'tinypass-settings-section', self::getOptionName( self::OPTION_NAME_NULL ), array(
			$this,
			'sanitizeSettings'
		) );
	}

	private function settingsResources() {
		register_setting( 'tinypass-resources-section', self::getOptionName( self::OPTION_NAME_RESOURCES ), array(
			$this,
			'sanitizeResources'
		) );
	}


	/**
	 * Update resources settings and save them as array
	 *
	 * @param $data
	 *
	 * @return array
	 */
	public function sanitizeResources( $data ) {
		if ( isset( $_POST[ $this->getOptionName( self::OPTION_NAME_RESOURCES ) ] ) ) {
			$settingsArray = array_map(
				array( $this, 'callbackSanitizeResourcesArray' ),
				$_POST[ $this->getOptionName( self::OPTION_NAME_RESOURCES ) ]
			);
		} else {
			$settingsArray = null;
		}

		if ( ! is_array( $settingsArray ) ) {
			// If both $settingsArray and $data are empty (but paywall has resources configured)
			if ( empty( $data ) && ! empty( $this::$resources ) ) {
				// Notify admin we can't save zero terms to resources
				add_settings_error( self::SETTINGS_ERROR_SLUG, self::SETTINGS_ERROR_SLUG, __( 'Please select at least one term', 'tinypass' ) );
			}

			return $this::$resources;
		}
		$resources             = $this->getResources( false );
		$updatedResourcesArray = array();
		foreach ( $resources as $resource ) {
			$resourceData = isset( $settingsArray[ $resource->rid() ] ) ? $settingsArray[ $resource->rid() ] : null;
			if ( ! $resourceData ) {
				$resourceData = array();
			}
			$resource->updateSettings( $resourceData );
			$updatedResourcesArray[ $resource->rid() ] = $resource->asArray();
		}

		return $updatedResourcesArray;
	}

	/**
	 * Callback for sanitizing multidimensional array
	 *
	 * @param mixed $item Pointer to array item
	 */
	private function callbackSanitizeResourcesArray( $settingsArray ) {
		// Walk through multidimensional array and apply sanitize_text_field to value
		array_walk_recursive(
			$settingsArray,
			function ( &$item ) {
				$item = boolval( $item );
			}
		);

		return $settingsArray;
	}

	public function sanitizeConnection() {
		// Get all options stored in database at this point
		$this->initOptions();
		try {
			// Try to init tinypass caller with call to API
			$this->initTinypass( true );
		} catch ( Exception $e ) {
			// Add error on failure. All exception messages are using i18n before throwing
			add_settings_error( self::SETTINGS_ERROR_SLUG, self::SETTINGS_ERROR_SLUG, 'Tinypass: ' . $e->getMessage() );
		}
		delete_option( self::getOptionName( self::OPTION_NAME_NULL ) );
	}

	/**
	 * Try to init plugin fully and display error on failure
	 */
	public function sanitizeSettings() {
		// Get all options stored in database at this point
		$this->initOptions();
		$this->sanitizeDefaultAccessSettings();
		try {
			// Try to init tinypass caller with call to API
			$this->initTinypass( true );
			add_settings_error( self::SETTINGS_ERROR_SLUG, self::SETTINGS_ERROR_SLUG, __( 'Plugin successfully has been configured', 'tinypass' ), 'updated' );
		} catch ( Exception $e ) {
			// Add error on failure. All exception messages are using i18n before throwing
			add_settings_error( self::SETTINGS_ERROR_SLUG, self::SETTINGS_ERROR_SLUG, 'Tinypass: ' . $e->getMessage() );
		}
	}

	public function sanitizeDefaultAccessSettings() {
		if ( is_array( self::$default_access_settings ) ) {
			$contentSettings = new TinypassContentSettings();

			$chargeOption = isset( self::$default_access_settings[ $contentSettings->chargeOptionPropertyName() ] ) ? self::$default_access_settings[ $contentSettings->chargeOptionPropertyName() ] : null;
			$contentSettings
				->chargeOption( $chargeOption )
				->resourceIds( isset( self::$default_access_settings[ $chargeOption ][ $contentSettings->resourceIdsPropertyName() ] ) ? self::$default_access_settings[ $chargeOption ][ $contentSettings->resourceIdsPropertyName() ] : null )
				->pppPrice( isset( self::$default_access_settings[ $chargeOption ][ $contentSettings->pppPricePropertyName() ] ) ? self::$default_access_settings[ $chargeOption ][ $contentSettings->pppPricePropertyName() ] : null )
				->pppCurrency( isset( self::$default_access_settings[ $chargeOption ][ $contentSettings->pppCurrencyPropertyName() ] ) ? self::$default_access_settings[ $chargeOption ][ $contentSettings->pppCurrencyPropertyName() ] : null );

			$contentSettings->validate( self::$business_model, self::$enable_ppp, self::$tinypass->algorithmicKeyAvailable(), $this->getResources() );
			$this->setOption( self::OPTION_NAME_DEFAULT_ACCESS_SETTINGS, $contentSettings->toArray() );
		}
	}

	/**
	 * Handles resetting settings on confirmation
	 */
	private function settingsReset() {
		if ( ( $resetConfirm = isset( $_POST['reset_confirm'] ) ) || isset( $_POST['reset_cancel'] ) ) {
			// If reset was confirmed
			if ( $resetConfirm ) {
				$this->resetAll();
			}
			wp_safe_redirect( admin_url( 'admin.php?page=' . self::SETTINGS_PAGE_SLUG ) );
		}
	}


	/**
	 * Renders provided template with tinypass header and footer
	 *
	 * @param string $view file name located in tinypass/views/admin/
	 * @param array $params variables to pass into template
	 */
	private function renderView( $view, $params = array() ) {
		extract( $params );
		if ( ! preg_match( '/\.php$/', $view ) ) {
			$view .= '.php';
		}
		// Render header
		require( plugin_dir_path( TINYPASS_PLUGIN_FILE_PATH ) . '/views/admin/header.php' );
		// Render the page itself
		require( plugin_dir_path( TINYPASS_PLUGIN_FILE_PATH ) . '/views/admin/' . sanitize_file_name( $view ) );
		// Render footer
		require( plugin_dir_path( TINYPASS_PLUGIN_FILE_PATH ) . '/views/admin/footer.php' );
	}

	/**
	 * @return string current step alias
	 */
	private function determineStep() {
		if ( ( isset( $_GET['page'] ) && ( $_GET['page'] == self::SETTINGS_RESOURCES_PAGE_SLUG ) ) ||
		     ( isset( $_POST['option_page'] ) && ( 'tinypass-resources-section' === $_POST['option_page'] ) ) ) {
			return 'resources';
		}

		if ( isset( $_GET['reset'] ) ) {
			return 'reset';
		}

		// If business model is not set ("Metered paywall" / "Subscription / keyed paywall") - need to set business model
		if ( ! self::$app_id || ! self::$api_token || ! self::$mode || ( ( self::$mode == TinypassConfig::MODE_CUSTOM ) && ! self::$dedicated ) || ! self::$private_key || ! self::$user_provider || ! self::$business_model ) {
			return 'businessModel';
		}
		// If business model is set to "Metered paywall" and there is no paywall offer id - display paywall_id setup
		if ( self::$business_model == TinypassConfig::BUSINESS_MODEL_METERED && ! self::$paywall_offer_id ) {
			return 'businessModel';
		}

		// If business model is set to "Metered paywall" - display paywall mode
		if ( self::$business_model == TinypassConfig::BUSINESS_MODEL_METERED ) {
			return 'paywall';
		}

		// If business model is set to "Subscription / keyed paywall" - display subscription page
		return 'subscription';
	}
}