!function($){"use strict";var liftAdmin=liftAdmin||{};liftAdmin.App=Backbone.Router.extend({el:"#lift-status-page",initialize:function(){Backbone.emulateHTTP=!0,Backbone.emulateJSON=!0,this.settings=new liftAdmin.SettingsCollection,this.domains=new liftAdmin.DomainsCollection,this.on("resetLift",this.render,this).on("unsetDomainName",this.render,this),this.settings.on("sync reset",function(){var credentials=this.settings.getValue("credentials");this.domains.settings=this.settings,""===credentials.accessKey&&""===credentials.secretKey?this.domains.disablePolling():this.domains.enablePolling(),this.render()},this).fetch(),this.domains.on("sync_error",this.handleDomainSyncError,this)},render:function(){var state=this.getState();return state&&this.renderState(state),this},getState:function(){var errorModal,state,domainname,domain,credentials,_this=this;return credentials=this.settings.getValue("credentials"),credentials.accessKey&&credentials.secretKey?"object"==typeof this.domains.deferred&&"then"in this.domains.deferred?$.when(this.domains.deferred).then(function(){_this.render()}):(domainname=this.settings.getValue("domainname"),domain=domainname&&this.domains.get(domainname),domainname?domain&&(domain.get("Processing")||domain.get("RequiresIndexDocuments"))?state="processing_setup":(domain||(errorModal=new liftAdmin.ModalMissingDomain({model:{settings:this.settings,domains:this.domains}}),this.openModal(errorModal)),state="dashboard"):state="set_domainname"):state="set_credentials",state},renderState:function(state){var new_view,state_views;return state_views={set_credentials:{view:liftAdmin.SetCredentialsView,args:{model:{settings:this.settings}}},set_domainname:{view:liftAdmin.SetDomainView,args:{model:{settings:this.settings,domains:this.domains}}},processing_setup:{view:liftAdmin.SetupProcessingView,args:{model:{settings:this.settings,domains:this.domains}}},dashboard:{view:liftAdmin.DashboardView,args:{model:{settings:this.settings,domains:this.domains}}}},new_view=state_views[state],this.currentView&&this.currentView instanceof new_view.view?void 0:(this.currentView&&this.currentView.close(),this.currentView=new new_view.view(new_view.args),this.currentView.setElement($("<div></div>").appendTo(this.el)),this.currentView.render(),this)},handleDomainSyncError:function(unused,error){var modal;return modal="invalidCredentials"===error.code?new liftAdmin.ModalErrorSetCredentialsView({model:{settings:this.settings}}):new liftAdmin.ModalError({model:{settings:this.settings,domains:this.domains,error:error}}),modal&&this.openModal(modal),this},openModal:function(view){var $el=$("<div></div>");return this.currentModal&&this.closeModal(this.currentModal),$("#modal_content").append($el),view.setElement($el),view.render(),$("#lift_modal").show(),this.currentModal=view,this},closeModal:function(view){return view.close(),$("#modal_content").html(""),$("#lift_modal").hide(),delete this.currentModal,this},resetLift:function(options){var success,silent;options=options?_.clone(options):{},success=options.success,silent=options.silent,options.silent=!0,options.success=function(object,options){var success,_this=object;return options=options?_.clone(options):{},options.success=function(){success&&success(_this,options),silent||_this.trigger("resetLift",_this,options)},_this.settings.get("credentials").save({value:{accessKey:"",secretKey:""}},options),_this.domains.disablePolling(),this},this.unsetDomainName(options)},unsetDomainName:function(options){var success,_this=this;return options=options?_.clone(options):{},success=options.success,options.success=function(){success&&success(_this,options),options.silent||_this.trigger("unsetDomainName",_this,options)},this.settings.get("domainname").save({value:""},options),this}}),liftAdmin.templateLoader={templates:{},getTemplate:function(name){return!this.templates[name]&&$("script#"+name+"-template").is("*")&&(this.templates[name]=$("script#"+name+"-template").html()),this.templates[name]||!1}},liftAdmin.SettingModel=Backbone.Model.extend({url:function(){return window.ajaxurl+"?action=lift_setting&setting="+this.get("id")+"&nonce="+this.collection.getValue("nonce")},parse:function(res){return res.id?res:res.data||null}}),liftAdmin.SettingsCollection=Backbone.Collection.extend({model:liftAdmin.SettingModel,url:function(){return window.ajaxurl+"?action=lift_settings"},getValue:function(id){return this.get(id)&&this.get(id).get("value")},setValue:function(id,value){return this.get(id)&&this.get(id).set("value",value)},toJSONObject:function(){return _.object(this.map(function(model){return[model.get("id"),model.get("value")]}))}}),liftAdmin.UpdateQueue=Backbone.Collection.extend({initialize:function(){this.meta={page:1},this.disablePolling()},enablePolling:function(){return this.pollingEnabled||this.fetchWithDeferred(),this.pollingEnabled=!0,this},disablePolling:function(){return this.pollingEnabled&&clearTimeout(this.pollingTimeout),this.pollingEnabled=!1,this},fetchWithDeferred:function(){var _this=this,intervalUpdate=function(){_this.fetchWithDeferred()};return this.deferred=this.fetch().always(function(){delete _this.deferred,_this.pollingEnabled&&(_this.pollingTimeout=setTimeout(intervalUpdate,6e4)),_this.error&&_this.pollingEnabled&&_this.trigger("sync_error",this,_this.error)}),this.deferred},url:function(){return window.ajaxurl+"?action=lift_update_queue&paged="+this.meta.page},fetchPage:function(page){return this.meta.page=page,this.fetch()},parse:function(resp){return this.meta.page=resp.current_page,this.meta.per_page=resp.per_page,this.meta.found_rows=resp.found_rows,this.meta.total_pages=Math.ceil(resp.found_rows/resp.per_page),resp.updates},getMeta:function(name){return this.meta[name]}}),liftAdmin.UpdateQueueView=Backbone.View.extend({_template:"update-queue",initialize:function(){this.template=_.template(liftAdmin.templateLoader.getTemplate(this._template)),this.collection=new liftAdmin.UpdateQueue,this.collection.on("sync",this.render,this).enablePolling()},events:{"click a.page-numbers":"onClickGoToPage"},render:function(){var _this=this;return"object"==typeof this.collection.deferred&&"then"in this.collection.deferred&&$.when(this.collection.deferred).then(function(){_this.render()}),$(this.el).html(this.template({updates:this.collection.toJSON(),meta:this.collection.meta})),$("#lift_queue_nav").liftPaginator({totalPages:this.collection.getMeta("total_pages"),currentPage:this.collection.getMeta("page")}),this},onClickGoToPage:function(e){var page=$(e.target).attr("href").replace(/\D/g,"");e.preventDefault(),this.goToPage(page)},goToPage:function(page){this.collection.fetchPage(page)}}),liftAdmin.ErrorLog=Backbone.Collection.extend({initialize:function(){this.meta={},this.disablePolling()},enablePolling:function(){return this.pollingEnabled||this.fetchWithDeferred(),this.pollingEnabled=!0,this},disablePolling:function(){return this.pollingEnabled&&clearTimeout(this.pollingTimeout),this.pollingEnabled=!1,this},fetchWithDeferred:function(){var _this=this,intervalUpdate=function(){_this.fetchWithDeferred()};return this.deferred=this.fetch().always(function(){delete _this.deferred,_this.pollingEnabled&&(_this.pollingTimeout=setTimeout(intervalUpdate,6e4)),_this.error&&_this.pollingEnabled&&_this.trigger("sync_error",this,_this.error)}),this.deferred},url:function(){return window.ajaxurl+"?action=lift_error_log&nonce="+this.meta.nonce},parse:function(resp){return this.meta.nonce=resp.nonce,this.meta.view_all_url=resp.view_all_url,resp.errors}}),liftAdmin.ErrorLogView=Backbone.View.extend({_template:"error-logs",initialize:function(){this.isCollectionSynced=!1,this.template=_.template(liftAdmin.templateLoader.getTemplate(this._template)),this.collection=new liftAdmin.ErrorLog,this.collection.on("all",this.render,this).enablePolling()},events:{"click #error_logs_clear":"onClickClearLogs"},render:function(){var _this=this;return"object"==typeof this.collection.deferred&&"then"in this.collection.deferred&&$.when(this.collection.deferred).then(function(){_this.render()}),$(this.el).html(this.template({errors:this.collection.toJSON(),meta:this.collection.meta})),this},onClickClearLogs:function(e){e.preventDefault(),this.collection.fetch({type:"POST"})}}),liftAdmin.DashboardView=Backbone.View.extend({initialize:function(){this.updateView=new liftAdmin.UpdateQueueView({el:$("#document_queue")}),window.liftData.errorLoggingEnabled&&(this.errorView=new liftAdmin.ErrorLogView({el:$("#error_log")})),this.template=_.template(liftAdmin.templateLoader.getTemplate("dashboard")),this.model.domains.on("reset",this.render,this),this.model.settings.on("reset",this.render,this)},onClose:function(){this.model.domains.off("reset",this.render,this)},events:{"click #batch_interval_update":"updateBatchInterval","click #batch_sync_now":"setSyncNow","click #lift_reset":"resetLift","click #override_search":"setOverrideSearch","click #lift_update_keys":"updateKeys"},render:function(){return this.el.innerHTML=this.template({settings:this.model.settings.toJSONObject(),domain:this.model.domains.toJSON()}),$("#batch_interval_unit").val(this.model.settings.getValue("batch_interval").unit),this.updateView.setElement($("#document_queue")).render(),this.errorView&&this.errorView.setElement($("#error_log")).render(),this},updateBatchInterval:function(){var _this=this,batchInterval={value:$("#batch_interval").val(),unit:$("#batch_interval_unit").val()};return this.beforeSave(),this.model.settings.get("batch_interval").save({value:batchInterval},{}).always(function(){_this.afterSave()}),this},setSyncNow:function(){var _this=this;return this.beforeSave(),this.model.settings.get("next_sync").save({value:Math.round((new Date).getTime()/1e3)},{}).always(function(){_this.model.settings.fetch(),_this.afterSave()}),this},setOverrideSearch:function(e){var _this=this;return this.beforeSave(),this.model.settings.get("override_search").save({value:e.target.checked},{}).always(function(){_this.afterSave()}),this},updateKeys:function(){var modal=new liftAdmin.ModalSetCredentialsView({model:{settings:this.model.settings}});return adminApp.openModal(modal),this},beforeSave:function(){return $(this.el).find("input").attr("disabled",!0),this},afterSave:function(){return $(this.el).find("input").attr("disabled",!1),this},resetLift:function(){return adminApp.resetLift(),this}}),liftAdmin.DomainModel=Backbone.Model.extend({url:function(){return window.ajaxurl+"?action=lift_domain&nonce="+this.getNonce()},idAttribute:"DomainName",getNonce:function(){return this.collection&&this.collection.nonce||this.nonce}}),liftAdmin.DomainsCollection=Backbone.Collection.extend({model:liftAdmin.DomainModel,initialize:function(){this.disablePolling()},enablePolling:function(){return this.pollingEnabled||this.fetchWithDeferred(),this.pollingEnabled=!0,this},disablePolling:function(){return this.pollingEnabled&&clearTimeout(this.pollingTimeout),this.pollingEnabled=!1,this},fetchWithDeferred:function(){var _this=this,intervalUpdate=function(){_this.fetchWithDeferred()},region=this.settings.get("region").get("value");return this.deferred=this.fetch({data:{region:region}}).always(function(){delete _this.deferred,_this.pollingEnabled&&(_this.pollingTimeout=setTimeout(intervalUpdate,6e4)),_this.error&&_this.pollingEnabled&&_this.trigger("sync_error",this,_this.error)}),this.deferred},url:function(){return window.ajaxurl+"?action=lift_domains"},parse:function(resp){return this.nonce=resp.nonce,this.error=resp.error,resp.domains}}),Backbone.View.prototype.close=function(){this.remove(),this.unbind(),this.undelegateEvents(),this.onClose&&this.onClose()},liftAdmin.SetCredentialsView=Backbone.View.extend({_template:"set-credentials",loadText:$('<p id="lift-load-text">'),loader:$('<p id="lift-ajax-loader">'),initialize:function(){this.template=_.template(liftAdmin.templateLoader.getTemplate(this._template)),this.model.settings.get("credentials").on("error",this.onSaveError,this),this.model.settings.get("credentials").on("sync",this.onSaveSuccess,this)},onClose:function(){this.model.settings.get("credentials").off("error",this.onSaveError,this),this.model.settings.get("credentials").off("sync",this.onSaveSuccess,this)},events:{"click #save_credentials":"updateCredentials"},render:function(){return this.el.innerHTML=this.template(this.model.settings.toJSONObject()),$("#save_credentials").after(this.loader),this},ajaxLoader:function(text){this.loadText.text(text),this.loader.html(this.loadText),this.loader.show()},beforeSave:function(){$("#errors").hide(),$("#save_credentials").attr("disabled","disabled"),this.ajaxLoader("Authenticating with Amazon")},updateCredentials:function(){var credentials={accessKey:$("#accessKey").val(),secretKey:$("#secretKey").val()};this.beforeSave(),this.model.settings.get("credentials").save({value:credentials},{})},onSaveError:function(model,resp){var errors=$.parseJSON(resp.responseText).errors;return this.renderErrors(errors),$("#save_credentials").removeAttr("disabled"),this.loader.hide(),this},onSaveSuccess:function(){this.ajaxLoader("Saving")},renderErrors:function(errors){var template=liftAdmin.templateLoader.getTemplate("errors");return $("#errors").html(_.template(template,{errors:errors})).show(),this}}),liftAdmin.ModalSetCredentialsView=liftAdmin.SetCredentialsView.extend({_template:"modal-set-credentials",initialize:function(){this.template=_.template(liftAdmin.templateLoader.getTemplate(this._template)),this.model.settings.get("credentials").on("sync",this.closeModal,this)},events:{"click #cancel":"closeModal","click #save_credentials":"updateCredentials"},onClose:function(){this.model.settings.get("credentials").off("sync",this.closeModal,this)},closeModal:function(){adminApp.closeModal(this)}}),liftAdmin.ModalErrorSetCredentialsView=liftAdmin.SetCredentialsView.extend({_template:"modal-error-set-credentials"}),liftAdmin.ModalError=Backbone.View.extend({_template:"modal-error",initialize:function(){this.template=_.template(liftAdmin.templateLoader.getTemplate(this._template)),this.model.domains.on("reset",this.closeIfFixed,this)},render:function(){return this.el.innerHTML=this.template({settings:this.model.settings.toJSONObject(),error:this.model.error}),this},closeIfFixed:function(){return this.model.domains.error||adminApp.closeModal(this),this}}),liftAdmin.ModalMissingDomain=Backbone.View.extend({_template:"modal-error-missing-domain",initialize:function(){this.template=_.template(liftAdmin.templateLoader.getTemplate(this._template))},events:{"click #reset_lift":"resetLift","click #unset_domainname":"unsetDomainName"},render:function(){return this.el.innerHTML=this.template({settings:this.model.settings.toJSONObject(),error:this.model.error}),this},resetLift:function(){return adminApp.on("resetLift",this.closeModal,this).resetLift(),this},unsetDomainName:function(){return adminApp.on("unsetDomainName",this.closeModal,this).unsetDomainName(),this},closeModal:function(){adminApp.closeModal(this)}}),liftAdmin.SetDomainView=Backbone.View.extend({loadText:$('<p id="lift-load-text">'),loader:$('<p id="lift-ajax-loader">'),initialize:function(){this.template=_.template(liftAdmin.templateLoader.getTemplate("set-domain"))},events:{"click #save_domainname":"setDomainname","click #cancel":"goBack","keypress #domainname":"submitOnEnter"},ajaxLoader:function(text){this.loadText.text(text),this.loader.html(this.loadText),this.loader.show()},render:function(){return this.el.innerHTML=this.template(this.model.settings.toJSONObject()),$("#save_domainname").after(this.loader),this},beforeSave:function(){return $("#errors").hide(),$("#save_domainname").attr("disabled","disabled"),this},afterSave:function(){return $("#save_domainname").removeAttr("disabled"),this},submitOnEnter:function(e){return 13==e.keyCode?(e.preventDefault(),document.getElementById("save_domainname").click(),this):void 0},setDomainname:function(){var domainname,domain,region;if(this.beforeSave(),domainname=$("#domainname").val(),region=$("#region").val(),domain=this.model.domains.get(domainname)){var model=this.model.domains.get(domainname);this.showConfirmModal(model)}else this.createDomain(domainname,region);return this},showConfirmModal:function(model){var modalView=new liftAdmin.ModalConfirmDomainView({model:model});modalView.on("cancelled",this.modalCancelled,this),modalView.on("confirmed",this.modalConfirmed,this),adminApp.openModal(modalView)},modalCancelled:function(view){return $("#save_domainname").removeAttr("disabled"),adminApp.closeModal(view),this},modalConfirmed:function(view,domain){return adminApp.closeModal(view),this.useDomain(domain),this},createDomain:function(domainname,region){var domain;return this.ajaxLoader("Creating Domain"),domain=new liftAdmin.DomainModel({DomainName:domainname,Region:region}),domain.nonce=this.model.domains.nonce,domain.on("sync",this.onCreateDomainSuccess,this),domain.on("error",this.onCreateDomainError,this),domain.save(),this},onCreateDomainSuccess:function(model,resp){var _this=this;if(this.ajaxLoader("Saving"),model.off("sync",this.onCreateDomainSuccess,this),model.off("error",this.onCreateDomainError,this),resp.data){var domain=new liftAdmin.DomainModel(resp.data);this.model.domains.add(domain),this.useDomain(domain)}else this.ajaxLoader("Waiting for Amazon to initialize domain"),this.model.domains.on("sync",function(){domain=this.model.domains.get(model),domain&&_this.useDomain(domain)},this),this.model.domains.enablePolling()},onCreateDomainError:function(model,resp){var errors=$.parseJSON(resp.responseText).errors;this.loader.hide(),model.off("sync",this.onCreateDomainSuccess,this),model.off("error",this.onCreateDomainError,this),"domain_exists"===errors[0].code?(this.model.domains.add(model),this.showConfirmModal(model)):this.renderErrors(errors).afterSave()},renderErrors:function(errors){var template=liftAdmin.templateLoader.getTemplate("errors");return $("#errors").html(_.template(template,{errors:errors})).show(),this},goBack:function(){return adminApp.renderState("set_credentials"),this},useDomain:function(domain){return adminApp.settings.get("domainname").save({value:domain.get("DomainName"),region:$("#region").val()}),this}}),liftAdmin.ModalConfirmDomainView=Backbone.View.extend({initialize:function(){this.template=_.template(liftAdmin.templateLoader.getTemplate("modal-confirm-domain"))},events:{"click #confirm_domain":"confirm","click #cancel_domain":"cancel"},render:function(){return this.el.innerHTML=this.template(this.model.toJSON()),this},confirm:function(){return this.trigger("confirmed",this,this.model),this},cancel:function(){return this.trigger("cancelled",this,this.model),this}}),liftAdmin.SetupProcessingView=Backbone.View.extend({initialize:function(){this.template=_.template(liftAdmin.templateLoader.getTemplate("setup-processing")),this.model.domains.on("reset",this.render,this)},render:function(){var errorModal,domain=this.model.domains.get(this.model.settings.getValue("domainname"));return domain.get("Deleted")&&(errorModal=new liftAdmin.ModalMissingDomain({model:this.model}),adminApp.openModal(errorModal)),!domain||domain.get("DocService").EndPoint?(adminApp.render(),this):(this.el.innerHTML=this.template(domain.toJSON()),this)},onClose:function(){return this.model.domains.off("reset",this.render,this),this}});var adminApp=new liftAdmin.App}(jQuery,window),function($){$.fn.liftPaginator=function(options){var defaults,settings,getPaginationLink=function(pageNum,currentPage){return pageNum===currentPage?'<span class="page-numbers current">'+pageNum+"</span>":'<a class="page-numbers" href="#'+pageNum+'">'+pageNum+"</a>"};return defaults={totalPages:1,currentPage:1,midSize:1,endSize:2},settings=$.extend(defaults,options),this.each(function(){var i,loopTil,$this=$(this),links=[];if(settings.totalPages>1){for(settings.currentPage>1&&links.push('<a class="next page-numbers" href="'+(settings.currentPage-1)+'">&laquo; Previous</a></span>'),i=1,loopTil=1+settings.endSize;loopTil>i;i+=1)links.push(getPaginationLink(i,settings.currentPage));if(i<settings.currentPage-settings.midSize&&links.push('<span class="page-numbers dots">…</span>'),i=Math.max(i,settings.currentPage-settings.midSize),loopTil=Math.min(settings.currentPage+settings.midSize+1,settings.totalPages-settings.endSize+1),loopTil>i)for(;loopTil>i;i+=1)links.push(getPaginationLink(i,settings.currentPage));for(i<settings.totalPages-settings.endSize+1&&links.push('<span class="page-numbers dots">…</span>'),i=Math.max(i,settings.totalPages-settings.endSize+1);i<=settings.totalPages;i+=1)links.push(getPaginationLink(i,settings.currentPage));settings.currentPage<settings.totalPages&&links.push('<a class="next page-numbers" href="'+(settings.currentPage+1)+'">Next &raquo;</a></span>'),$this.append('<span class="pagination-links">'+links.join("")+"</span>")}})}}(jQuery);